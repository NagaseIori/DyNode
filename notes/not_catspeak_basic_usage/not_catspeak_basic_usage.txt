In Catspeak, Compiling and running programs are separate steps. You should aim
to perform any compilation of scripts during a loading screen so that running
your programs is much faster.

# Compiling Programs

The first step to running your Catspeak programs involves compiling the
source code from its human-readable form into an executable form. This can be
done in two ways: from a GML string, or from a character buffer.

## Compiling From a String

If your Catspeak program is stored within a GML string, you can use the
[catspeak_compile_string] function to compile it. Consider the following
program:
```
// counts to 10 and then returns a message
var src = @'
    let n = 0
    while (n <= 10) {
        print n
        n = it + 1
    }
    return "blast off!"
';
```
You can use the [catspeak_compile_string] function to asynchronously compile
the sourc code:
```
var process = catspeak_compile_string(src);
```
The `process` variable stores a reference to a [CatspeakProcess] responsible
for compiling your code. Once the process is complete, you can retreive the
result using the [andThen] method:
```
process.andThen(function(code) {
    show_message("success!");
});
```
If the program fails to compile, this callback function will never execute.
In this case, you will need to use the `andCatch` method to catch the
compilation error:
```
process.andCatch(function(err) {
    show_message("oh no, an error occurred!");
});
```
For more information on this behaviour, see the [Future] definition.

If after running this example you see a pop-up window with the message
"success!", then **congratulations!** You have successfully compiled your
first Catspeak program. For information on how to run this program, see the
[Executing Programs] section.

## Compiling From a Buffer

Compiling a buffer works similarly to [Compiling From a String], except you
use the [catspeak_compile_buffer] function:
```
catspeak_compile_buffer(buff).andThen(function(code) {
    show_message(code.disassembly());
});
```

Different from the [catspeak_compile_string] function, the buffer version
accepts an additional parameter, that if set to `true` will automatically
delete the buffer once the compiler process ends so you don't have to. By
default, this is set to `false`.

# Executing Programs

The second step to running your Catspeak programs is to interpret the
compiled code. This can be done using the `catspeak_execute` function.
Following on from the example shown in [Compiling From a String], the
function contained in the `code` variable can be interpreted like so:
```
catspeak_execute(code).andThen(function(result) {
    show_message(result);
});
```
This will spawn a new [CatspeakProcess] which goes through the process of
interpreting the compiled code. Once the program has finished running, the
callback to the [andThen] method is called with the result of the program. In
this example, the result was the string `"blast off!"`, so a pop-up window
with the message "blast off!" will be shown.

If everything went to plan, you should have just compiled and executed your
first Catspeak program!

NOTE: If you do not care about the result of the program, you can omit the
      [andThen] method call.

# Customising the Standard Library

You can expose additional functions and constants to Catspeak programs by
using [catspeak_add_function] and [catspeak_add_constant]. For example,
adding a new function to display a "hello" message in a pop-up window:
```
catspeak_add_function("say_hello", function() {
    show_message("hello");
});
```
From now on, any Catspeak **new** programs will be able to use the `say_hello`
function.